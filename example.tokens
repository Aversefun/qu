[
    Token {
        raw: ModuleAnnotation,
        loc: example.qir:1:1,
        len: example.qir at index 2,
    },
    Token {
        raw: Ident(
            "quver",
        ),
        loc: example.qir:1:3,
        len: example.qir at index 5,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:1:8,
        len: example.qir at index 1,
    },
    Token {
        raw: StrLiteral(
            Normal,
            "0.0.1",
        ),
        loc: example.qir:1:9,
        len: example.qir at index 7,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:1:16,
        len: example.qir at index 1,
    },
    Token {
        raw: ModuleAnnotation,
        loc: example.qir:2:1,
        len: example.qir at index 2,
    },
    Token {
        raw: Ident(
            "runtime_checks",
        ),
        loc: example.qir:2:3,
        len: example.qir at index 14,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:2:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "array_bounds",
        ),
        loc: example.qir:2:18,
        len: example.qir at index 12,
    },
    Token {
        raw: Comma,
        loc: example.qir:2:30,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "underflow",
        ),
        loc: example.qir:2:32,
        len: example.qir at index 9,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:2:41,
        len: example.qir at index 1,
    },
    Token {
        raw: ModuleAnnotation,
        loc: example.qir:3:1,
        len: example.qir at index 2,
    },
    Token {
        raw: Ident(
            "check_violated",
        ),
        loc: example.qir:3:3,
        len: example.qir at index 14,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:3:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "libc_exit",
        ),
        loc: example.qir:3:18,
        len: example.qir at index 9,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:3:27,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "1",
        ),
        loc: example.qir:3:28,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:3:29,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:3:30,
        len: example.qir at index 1,
    },
    Token {
        raw: ItemAnnotation,
        loc: example.qir:5:1,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "extern",
        ),
        loc: example.qir:5:2,
        len: example.qir at index 6,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:5:8,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "C",
        ),
        loc: example.qir:5:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Comma,
        loc: example.qir:5:10,
        len: example.qir at index 1,
    },
    Token {
        raw: StrLiteral(
            Normal,
            "exit",
        ),
        loc: example.qir:5:12,
        len: example.qir at index 6,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:5:18,
        len: example.qir at index 1,
    },
    Token {
        raw: Function,
        loc: example.qir:6:1,
        len: example.qir at index 2,
    },
    Token {
        raw: Ident(
            "libc_exit",
        ),
        loc: example.qir:6:4,
        len: example.qir at index 9,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:6:13,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "i32",
        ),
        loc: example.qir:6:14,
        len: example.qir at index 3,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:6:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Returns,
        loc: example.qir:6:19,
        len: example.qir at index 2,
    },
    Token {
        raw: Bang,
        loc: example.qir:6:22,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:6:23,
        len: example.qir at index 1,
    },
    Token {
        raw: ItemAnnotation,
        loc: example.qir:8:1,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "extern",
        ),
        loc: example.qir:8:2,
        len: example.qir at index 6,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:8:8,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "C",
        ),
        loc: example.qir:8:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Comma,
        loc: example.qir:8:10,
        len: example.qir at index 1,
    },
    Token {
        raw: StrLiteral(
            Normal,
            "printf",
        ),
        loc: example.qir:8:12,
        len: example.qir at index 8,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:8:20,
        len: example.qir at index 1,
    },
    Token {
        raw: Function,
        loc: example.qir:9:1,
        len: example.qir at index 2,
    },
    Token {
        raw: Ident(
            "libc_printf",
        ),
        loc: example.qir:9:4,
        len: example.qir at index 11,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:9:15,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "c_str",
        ),
        loc: example.qir:9:16,
        len: example.qir at index 5,
    },
    Token {
        raw: Comma,
        loc: example.qir:9:21,
        len: example.qir at index 1,
    },
    Token {
        raw: Continues,
        loc: example.qir:9:23,
        len: example.qir at index 3,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:9:26,
        len: example.qir at index 1,
    },
    Token {
        raw: Returns,
        loc: example.qir:9:28,
        len: example.qir at index 2,
    },
    Token {
        raw: Ident(
            "i32",
        ),
        loc: example.qir:9:31,
        len: example.qir at index 3,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:9:34,
        len: example.qir at index 1,
    },
    Token {
        raw: ItemAnnotation,
        loc: example.qir:11:1,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "export",
        ),
        loc: example.qir:11:2,
        len: example.qir at index 6,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:11:8,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "C",
        ),
        loc: example.qir:11:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Comma,
        loc: example.qir:11:10,
        len: example.qir at index 1,
    },
    Token {
        raw: StrLiteral(
            Normal,
            "main",
        ),
        loc: example.qir:11:12,
        len: example.qir at index 6,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:11:18,
        len: example.qir at index 1,
    },
    Token {
        raw: Function,
        loc: example.qir:12:1,
        len: example.qir at index 2,
    },
    Token {
        raw: Ident(
            "main",
        ),
        loc: example.qir:12:4,
        len: example.qir at index 4,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:12:8,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:12:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "argc",
        ),
        loc: example.qir:12:10,
        len: example.qir at index 4,
    },
    Token {
        raw: Colon,
        loc: example.qir:12:14,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "uptr",
        ),
        loc: example.qir:12:16,
        len: example.qir at index 4,
    },
    Token {
        raw: Comma,
        loc: example.qir:12:20,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:12:22,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "argv",
        ),
        loc: example.qir:12:23,
        len: example.qir at index 4,
    },
    Token {
        raw: Colon,
        loc: example.qir:12:27,
        len: example.qir at index 1,
    },
    Token {
        raw: PointerOrMul,
        loc: example.qir:12:29,
        len: example.qir at index 1,
    },
    Token {
        raw: OpenSquare,
        loc: example.qir:12:30,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "c_str",
        ),
        loc: example.qir:12:31,
        len: example.qir at index 5,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:12:36,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:12:38,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "argc",
        ),
        loc: example.qir:12:39,
        len: example.qir at index 4,
    },
    Token {
        raw: Property,
        loc: example.qir:12:43,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "0",
        ),
        loc: example.qir:12:44,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseSquare,
        loc: example.qir:12:45,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:12:46,
        len: example.qir at index 1,
    },
    Token {
        raw: Returns,
        loc: example.qir:12:48,
        len: example.qir at index 2,
    },
    Token {
        raw: Bang,
        loc: example.qir:12:51,
        len: example.qir at index 1,
    },
    Token {
        raw: BlockRefOrAnd,
        loc: example.qir:12:53,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "entry",
        ),
        loc: example.qir:12:54,
        len: example.qir at index 5,
    },
    Token {
        raw: OpenCurly,
        loc: example.qir:12:60,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:13:5,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v0",
        ),
        loc: example.qir:13:6,
        len: example.qir at index 2,
    },
    Token {
        raw: Colon,
        loc: example.qir:13:8,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "i32",
        ),
        loc: example.qir:13:10,
        len: example.qir at index 3,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:13:13,
        len: example.qir at index 1,
    },
    Token {
        raw: BlockRefOrAnd,
        loc: example.qir:14:5,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "entry",
        ),
        loc: example.qir:14:6,
        len: example.qir at index 5,
    },
    Token {
        raw: OpenCurly,
        loc: example.qir:14:12,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:15:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v0",
        ),
        loc: example.qir:15:10,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:15:12,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "1",
        ),
        loc: example.qir:15:13,
        len: example.qir at index 1,
    },
    Token {
        raw: Assign,
        loc: example.qir:15:15,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "0",
        ),
        loc: example.qir:15:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:15:18,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "x86_64",
        ),
        loc: example.qir:16:9,
        len: example.qir at index 6,
    },
    Token {
        raw: Colon,
        loc: example.qir:16:15,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "intel",
        ),
        loc: example.qir:16:16,
        len: example.qir at index 5,
    },
    Token {
        raw: OpenSquare,
        loc: example.qir:16:22,
        len: example.qir at index 1,
    },
    Token {
        raw: InlineAssemblyContents(
            " ; Will be skipped over on other architectures.\n            ; Inline assembly\n            add eax, 8\n        ",
        ),
        loc: example.qir:16:23,
        len: example.qir at index 108,
    },
    Token {
        raw: CloseSquare,
        loc: example.qir:16:132,
        len: example.qir at index 1,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:16:134,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:17:13,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v0",
        ),
        loc: example.qir:17:14,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:17:16,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "1",
        ),
        loc: example.qir:17:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Colon,
        loc: example.qir:17:18,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "eax",
        ),
        loc: example.qir:17:19,
        len: example.qir at index 3,
    },
    Token {
        raw: Comma,
        loc: example.qir:17:22,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "eax",
        ),
        loc: example.qir:18:13,
        len: example.qir at index 3,
    },
    Token {
        raw: Colon,
        loc: example.qir:18:16,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:18:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v0",
        ),
        loc: example.qir:18:18,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:18:20,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "2",
        ),
        loc: example.qir:18:21,
        len: example.qir at index 1,
    },
    Token {
        raw: Comma,
        loc: example.qir:18:22,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "_opt",
        ),
        loc: example.qir:23:13,
        len: example.qir at index 4,
    },
    Token {
        raw: Colon,
        loc: example.qir:23:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "noflags",
        ),
        loc: example.qir:23:18,
        len: example.qir at index 7,
    },
    Token {
        raw: Comma,
        loc: example.qir:23:25,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "_opt",
        ),
        loc: example.qir:26:13,
        len: example.qir at index 4,
    },
    Token {
        raw: Colon,
        loc: example.qir:26:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "pure",
        ),
        loc: example.qir:26:18,
        len: example.qir at index 4,
    },
    Token {
        raw: Comma,
        loc: example.qir:26:22,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "_opt",
        ),
        loc: example.qir:28:13,
        len: example.qir at index 4,
    },
    Token {
        raw: Colon,
        loc: example.qir:28:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "nomem",
        ),
        loc: example.qir:28:18,
        len: example.qir at index 5,
    },
    Token {
        raw: Comma,
        loc: example.qir:28:23,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "_opt",
        ),
        loc: example.qir:30:13,
        len: example.qir at index 4,
    },
    Token {
        raw: Colon,
        loc: example.qir:30:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "nostack",
        ),
        loc: example.qir:30:18,
        len: example.qir at index 7,
    },
    Token {
        raw: Comma,
        loc: example.qir:30:25,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:31:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:31:10,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "x86_64",
        ),
        loc: example.qir:32:9,
        len: example.qir at index 6,
    },
    Token {
        raw: Colon,
        loc: example.qir:32:15,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "intel",
        ),
        loc: example.qir:32:16,
        len: example.qir at index 5,
    },
    Token {
        raw: OpenSquare,
        loc: example.qir:32:22,
        len: example.qir at index 1,
    },
    Token {
        raw: InlineAssemblyContents(
            " ; Inline assembly block without options\n            ; Inline assembly\n            nop\n        ",
        ),
        loc: example.qir:32:23,
        len: example.qir at index 94,
    },
    Token {
        raw: CloseSquare,
        loc: example.qir:32:118,
        len: example.qir at index 1,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:32:120,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:32:121,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:32:122,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:33:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v0",
        ),
        loc: example.qir:33:10,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:33:12,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "3",
        ),
        loc: example.qir:33:13,
        len: example.qir at index 1,
    },
    Token {
        raw: Assign,
        loc: example.qir:33:15,
        len: example.qir at index 1,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:33:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "phi",
        ),
        loc: example.qir:33:18,
        len: example.qir at index 3,
    },
    Token {
        raw: Variable,
        loc: example.qir:33:22,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v0",
        ),
        loc: example.qir:33:23,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:33:25,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "1",
        ),
        loc: example.qir:33:26,
        len: example.qir at index 1,
    },
    Token {
        raw: Comma,
        loc: example.qir:33:27,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:33:29,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v0",
        ),
        loc: example.qir:33:30,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:33:32,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "2",
        ),
        loc: example.qir:33:33,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:33:34,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:33:35,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:34:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v1",
        ),
        loc: example.qir:34:10,
        len: example.qir at index 2,
    },
    Token {
        raw: Colon,
        loc: example.qir:34:12,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "u32",
        ),
        loc: example.qir:34:14,
        len: example.qir at index 3,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:34:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:35:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v1",
        ),
        loc: example.qir:35:10,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:35:12,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "0",
        ),
        loc: example.qir:35:13,
        len: example.qir at index 1,
    },
    Token {
        raw: Assign,
        loc: example.qir:35:15,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "add",
        ),
        loc: example.qir:35:17,
        len: example.qir at index 3,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:35:20,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:35:21,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "argc",
        ),
        loc: example.qir:35:22,
        len: example.qir at index 4,
    },
    Token {
        raw: Property,
        loc: example.qir:35:26,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "0",
        ),
        loc: example.qir:35:27,
        len: example.qir at index 1,
    },
    Token {
        raw: Comma,
        loc: example.qir:35:28,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "50",
        ),
        loc: example.qir:35:30,
        len: example.qir at index 2,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:35:32,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:35:33,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:36:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v1",
        ),
        loc: example.qir:36:10,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:36:12,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "1",
        ),
        loc: example.qir:36:13,
        len: example.qir at index 1,
    },
    Token {
        raw: Assign,
        loc: example.qir:36:15,
        len: example.qir at index 1,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:36:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Rem,
        loc: example.qir:36:18,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:36:20,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v1",
        ),
        loc: example.qir:36:21,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:36:23,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "0",
        ),
        loc: example.qir:36:24,
        len: example.qir at index 1,
    },
    Token {
        raw: Comma,
        loc: example.qir:36:25,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "50",
        ),
        loc: example.qir:36:27,
        len: example.qir at index 2,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:36:29,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:36:30,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:37:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v1",
        ),
        loc: example.qir:37:10,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:37:12,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "2",
        ),
        loc: example.qir:37:13,
        len: example.qir at index 1,
    },
    Token {
        raw: Assign,
        loc: example.qir:37:15,
        len: example.qir at index 1,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:37:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Sub,
        loc: example.qir:37:18,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "10",
        ),
        loc: example.qir:37:20,
        len: example.qir at index 2,
    },
    Token {
        raw: Comma,
        loc: example.qir:37:22,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:37:24,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v1",
        ),
        loc: example.qir:37:25,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:37:27,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "1",
        ),
        loc: example.qir:37:28,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:37:29,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:37:30,
        len: example.qir at index 1,
    },
    Token {
        raw: Drop,
        loc: example.qir:39:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Assign,
        loc: example.qir:39:11,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "libc_printf",
        ),
        loc: example.qir:39:13,
        len: example.qir at index 11,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:39:24,
        len: example.qir at index 1,
    },
    Token {
        raw: StrLiteral(
            C,
            "argc=%d",
        ),
        loc: example.qir:39:25,
        len: example.qir at index 10,
    },
    Token {
        raw: Comma,
        loc: example.qir:39:35,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:39:37,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v1",
        ),
        loc: example.qir:39:38,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:39:40,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "2",
        ),
        loc: example.qir:39:41,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:39:42,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:39:43,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "no_return_function",
        ),
        loc: example.qir:40:9,
        len: example.qir at index 18,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:40:27,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:40:28,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:40:29,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:41:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v2",
        ),
        loc: example.qir:41:10,
        len: example.qir at index 2,
    },
    Token {
        raw: Colon,
        loc: example.qir:41:12,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "uptr",
        ),
        loc: example.qir:41:14,
        len: example.qir at index 4,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:41:18,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:42:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v2",
        ),
        loc: example.qir:42:10,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:42:12,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "0",
        ),
        loc: example.qir:42:13,
        len: example.qir at index 1,
    },
    Token {
        raw: Assign,
        loc: example.qir:42:15,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "11",
        ),
        loc: example.qir:42:17,
        len: example.qir at index 2,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:42:19,
        len: example.qir at index 1,
    },
    Token {
        raw: Drop,
        loc: example.qir:43:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Assign,
        loc: example.qir:43:11,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "libc_printf",
        ),
        loc: example.qir:43:13,
        len: example.qir at index 11,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:43:24,
        len: example.qir at index 1,
    },
    Token {
        raw: StrLiteral(
            C,
            "v2=%d",
        ),
        loc: example.qir:43:25,
        len: example.qir at index 8,
    },
    Token {
        raw: Comma,
        loc: example.qir:43:33,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:43:35,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v2",
        ),
        loc: example.qir:43:36,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:43:38,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "0",
        ),
        loc: example.qir:43:39,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:43:40,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:43:41,
        len: example.qir at index 1,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:44:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "cmpbr",
        ),
        loc: example.qir:44:10,
        len: example.qir at index 5,
    },
    Token {
        raw: Variable,
        loc: example.qir:44:16,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v1",
        ),
        loc: example.qir:44:17,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:44:19,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "2",
        ),
        loc: example.qir:44:20,
        len: example.qir at index 1,
    },
    Token {
        raw: Comma,
        loc: example.qir:44:21,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "eq",
        ),
        loc: example.qir:44:23,
        len: example.qir at index 2,
    },
    Token {
        raw: Comma,
        loc: example.qir:44:25,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "9",
        ),
        loc: example.qir:44:27,
        len: example.qir at index 1,
    },
    Token {
        raw: Comma,
        loc: example.qir:44:28,
        len: example.qir at index 1,
    },
    Token {
        raw: BlockRefOrAnd,
        loc: example.qir:44:30,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "true",
        ),
        loc: example.qir:44:31,
        len: example.qir at index 4,
    },
    Token {
        raw: Comma,
        loc: example.qir:44:35,
        len: example.qir at index 1,
    },
    Token {
        raw: BlockRefOrAnd,
        loc: example.qir:44:37,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "end",
        ),
        loc: example.qir:44:38,
        len: example.qir at index 3,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:44:41,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:44:42,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseCurly,
        loc: example.qir:45:5,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:45:6,
        len: example.qir at index 1,
    },
    Token {
        raw: BlockRefOrAnd,
        loc: example.qir:46:5,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "true",
        ),
        loc: example.qir:46:6,
        len: example.qir at index 4,
    },
    Token {
        raw: OpenCurly,
        loc: example.qir:46:11,
        len: example.qir at index 1,
    },
    Token {
        raw: Drop,
        loc: example.qir:47:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Assign,
        loc: example.qir:47:11,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "libc_printf",
        ),
        loc: example.qir:47:13,
        len: example.qir at index 11,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:47:24,
        len: example.qir at index 1,
    },
    Token {
        raw: StrLiteral(
            C,
            "one argument passed",
        ),
        loc: example.qir:47:25,
        len: example.qir at index 22,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:47:47,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:47:48,
        len: example.qir at index 1,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:48:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "jmp",
        ),
        loc: example.qir:48:10,
        len: example.qir at index 3,
    },
    Token {
        raw: BlockRefOrAnd,
        loc: example.qir:48:14,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "end",
        ),
        loc: example.qir:48:15,
        len: example.qir at index 3,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:48:18,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:48:19,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseCurly,
        loc: example.qir:49:5,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:49:6,
        len: example.qir at index 1,
    },
    Token {
        raw: BlockRefOrAnd,
        loc: example.qir:50:5,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "end",
        ),
        loc: example.qir:50:6,
        len: example.qir at index 3,
    },
    Token {
        raw: OpenCurly,
        loc: example.qir:50:10,
        len: example.qir at index 1,
    },
    Token {
        raw: Drop,
        loc: example.qir:51:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Assign,
        loc: example.qir:51:11,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "libc_printf",
        ),
        loc: example.qir:51:13,
        len: example.qir at index 11,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:51:24,
        len: example.qir at index 1,
    },
    Token {
        raw: StrLiteral(
            C,
            "v0=%d on x86_64 v0 should be 8 and on others should be 0",
        ),
        loc: example.qir:51:25,
        len: example.qir at index 59,
    },
    Token {
        raw: Comma,
        loc: example.qir:51:84,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:51:86,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "v0",
        ),
        loc: example.qir:51:87,
        len: example.qir at index 2,
    },
    Token {
        raw: Property,
        loc: example.qir:51:89,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "3",
        ),
        loc: example.qir:51:90,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:51:91,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:51:92,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "libc_exit",
        ),
        loc: example.qir:52:9,
        len: example.qir at index 9,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:52:18,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "0",
        ),
        loc: example.qir:52:19,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:52:20,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:52:21,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseCurly,
        loc: example.qir:53:5,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:53:6,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseCurly,
        loc: example.qir:54:1,
        len: example.qir at index 1,
    },
    Token {
        raw: Function,
        loc: example.qir:56:1,
        len: example.qir at index 2,
    },
    Token {
        raw: Ident(
            "no_return_function",
        ),
        loc: example.qir:56:4,
        len: example.qir at index 18,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:56:22,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:56:23,
        len: example.qir at index 1,
    },
    Token {
        raw: BlockRefOrAnd,
        loc: example.qir:56:25,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "entry",
        ),
        loc: example.qir:56:26,
        len: example.qir at index 5,
    },
    Token {
        raw: OpenCurly,
        loc: example.qir:56:32,
        len: example.qir at index 1,
    },
    Token {
        raw: BlockRefOrAnd,
        loc: example.qir:57:5,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "entry",
        ),
        loc: example.qir:57:6,
        len: example.qir at index 5,
    },
    Token {
        raw: OpenCurly,
        loc: example.qir:57:12,
        len: example.qir at index 1,
    },
    Token {
        raw: Drop,
        loc: example.qir:58:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Assign,
        loc: example.qir:58:11,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "libc_printf",
        ),
        loc: example.qir:58:13,
        len: example.qir at index 11,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:58:24,
        len: example.qir at index 1,
    },
    Token {
        raw: StrLiteral(
            C,
            "this is from no_return_function",
        ),
        loc: example.qir:58:25,
        len: example.qir at index 34,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:58:59,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:58:60,
        len: example.qir at index 1,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:59:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "ret",
        ),
        loc: example.qir:59:10,
        len: example.qir at index 3,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:59:13,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:59:14,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseCurly,
        loc: example.qir:60:5,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseCurly,
        loc: example.qir:61:1,
        len: example.qir at index 1,
    },
    Token {
        raw: ItemAnnotation,
        loc: example.qir:63:1,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "hint",
        ),
        loc: example.qir:63:2,
        len: example.qir at index 4,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:63:6,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "inline",
        ),
        loc: example.qir:63:7,
        len: example.qir at index 6,
    },
    Token {
        raw: Colon,
        loc: example.qir:63:13,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "always",
        ),
        loc: example.qir:63:14,
        len: example.qir at index 6,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:63:20,
        len: example.qir at index 1,
    },
    Token {
        raw: Function,
        loc: example.qir:64:1,
        len: example.qir at index 2,
    },
    Token {
        raw: Ident(
            "add",
        ),
        loc: example.qir:64:4,
        len: example.qir at index 3,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:64:7,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:64:8,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "a",
        ),
        loc: example.qir:64:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Colon,
        loc: example.qir:64:10,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "u32",
        ),
        loc: example.qir:64:12,
        len: example.qir at index 3,
    },
    Token {
        raw: Comma,
        loc: example.qir:64:15,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:64:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "b",
        ),
        loc: example.qir:64:18,
        len: example.qir at index 1,
    },
    Token {
        raw: Colon,
        loc: example.qir:64:19,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "u32",
        ),
        loc: example.qir:64:21,
        len: example.qir at index 3,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:64:24,
        len: example.qir at index 1,
    },
    Token {
        raw: Returns,
        loc: example.qir:64:26,
        len: example.qir at index 2,
    },
    Token {
        raw: Ident(
            "u32",
        ),
        loc: example.qir:64:29,
        len: example.qir at index 3,
    },
    Token {
        raw: BlockRefOrAnd,
        loc: example.qir:64:33,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "entry",
        ),
        loc: example.qir:64:34,
        len: example.qir at index 5,
    },
    Token {
        raw: OpenCurly,
        loc: example.qir:64:40,
        len: example.qir at index 1,
    },
    Token {
        raw: BlockRefOrAnd,
        loc: example.qir:65:5,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "entry",
        ),
        loc: example.qir:65:6,
        len: example.qir at index 5,
    },
    Token {
        raw: OpenCurly,
        loc: example.qir:65:12,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:66:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "c",
        ),
        loc: example.qir:66:10,
        len: example.qir at index 1,
    },
    Token {
        raw: Colon,
        loc: example.qir:66:11,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "u32",
        ),
        loc: example.qir:66:13,
        len: example.qir at index 3,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:66:16,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:67:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "c",
        ),
        loc: example.qir:67:10,
        len: example.qir at index 1,
    },
    Token {
        raw: Property,
        loc: example.qir:67:11,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "0",
        ),
        loc: example.qir:67:12,
        len: example.qir at index 1,
    },
    Token {
        raw: Assign,
        loc: example.qir:67:14,
        len: example.qir at index 1,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:67:16,
        len: example.qir at index 1,
    },
    Token {
        raw: Add,
        loc: example.qir:67:17,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:67:19,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "a",
        ),
        loc: example.qir:67:20,
        len: example.qir at index 1,
    },
    Token {
        raw: Property,
        loc: example.qir:67:21,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "0",
        ),
        loc: example.qir:67:22,
        len: example.qir at index 1,
    },
    Token {
        raw: Comma,
        loc: example.qir:67:23,
        len: example.qir at index 1,
    },
    Token {
        raw: Variable,
        loc: example.qir:67:25,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "b",
        ),
        loc: example.qir:67:26,
        len: example.qir at index 1,
    },
    Token {
        raw: Property,
        loc: example.qir:67:27,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "0",
        ),
        loc: example.qir:67:28,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:67:29,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:67:30,
        len: example.qir at index 1,
    },
    Token {
        raw: OpenParen,
        loc: example.qir:68:9,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "ret",
        ),
        loc: example.qir:68:10,
        len: example.qir at index 3,
    },
    Token {
        raw: Variable,
        loc: example.qir:68:14,
        len: example.qir at index 1,
    },
    Token {
        raw: Ident(
            "c",
        ),
        loc: example.qir:68:15,
        len: example.qir at index 1,
    },
    Token {
        raw: Property,
        loc: example.qir:68:16,
        len: example.qir at index 1,
    },
    Token {
        raw: NumericLiteral(
            "0",
        ),
        loc: example.qir:68:17,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseParen,
        loc: example.qir:68:18,
        len: example.qir at index 1,
    },
    Token {
        raw: Semicolon,
        loc: example.qir:68:19,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseCurly,
        loc: example.qir:69:5,
        len: example.qir at index 1,
    },
    Token {
        raw: CloseCurly,
        loc: example.qir:70:1,
        len: example.qir at index 1,
    },
]